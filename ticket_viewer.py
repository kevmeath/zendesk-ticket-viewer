import ticket_display
import ticket_api

email = ""
password = ""
subdomain = ""
api = ticket_api.TicketAPI(subdomain, email, password, token=True)


def view_all_tickets():
    """
    View all tickets in pages with 25 tickets per page
    :return:
    """

    # Get the first page
    page = api.get_ticket_page(1)

    option = ""
    while option != "q":
        if page is not None:
            ticket_display.display_page(page)
            if page["next_page"] is not None:  # if there is a next page show next page option
                print("n: Next page")
            if page["previous_page"] is not None:  # if there is a previous page show previous page option
                print("p: Previous page")
        else:
            print("Page not found\n")

        print("q: Quit")
        option = input("Select an option: ")

        if option == "n":
            if page["next_page"] is not None:
                page = api.get(page["next_page"])

        elif option == "p":
            if page["previous_page"] is not None:
                page = api.get(page["previous_page"])

        print("")


def view_ticket(ticket_id):
    """
    View an individual ticket
    :param ticket_id:
    :return:
    """

    # get the ticket with the given id
    ticket = api.get_ticket(ticket_id)

    option = ""
    while option != "q":
        if ticket is not None:  # if the api returned a ticket, display it
            ticket_display.display_ticket_detail(ticket["ticket"])
        else:
            print("")

        print("q: Quit")
        option = input("Select an option: ")
        print("")


def create_ticket():
    """
    Create a ticket
    :return:
    """

    # these properties are required to create a ticket
    required_props = ["subject", "description"]

    # these properties are optional, if left blank they will be automatically generated by Zendesk
    optional_props = {
        "type": ["problem", "incident", "question", "task"],
        "priority": ["urgent", "high", "normal", "low"],
        "status": ["new", "open", "pending", "hold", "solved", "closed"]
    }

    # create a dict for the ticket properties
    ticket_props = {}

    for prop in required_props:  # get user input for each required property
        value = ""
        while value == "":  # don't allow empty strings for required properties
            value = input("Enter ticket {prop} (required): ".format(prop=prop))

        ticket_props[prop] = value

    for prop in optional_props:  # selection menu for each optional property
        value_list = optional_props[prop]
        length = len(optional_props[prop])

        while True:  # loop will break when an option is selected or input is blank
            print("")
            for i in range(length):  # print each option with an index
                print("{i}: {prop}".format(i=i+1, prop=optional_props[prop][i]))

            option = input("Select ticket {prop} (leave blank to skip): ".format(prop=prop))

            if option == "":  # skip this option if input is blank
                break

            try:  # catch errors when converting input to integer
                option_int = int(option)
                if 1 <= option_int <= length:  # check if input is in range of options
                    # assign the chosen property
                    ticket_props[prop] = value_list[int(option)-1]
                    break
                else:
                    # prompt for input in range of options
                    print("\nPlease enter a number from 1-" + str(length))
            except ValueError:
                # prompt for a number
                print("\nPlease enter a number")

    # create a ticket with the given properties
    ticket = {"ticket": ticket_props}

    # create the ticket
    api.create_ticket(ticket)


def main():
    """
    Display the main menu
    :return:
    """

    option = ""
    while option != "q":  # exit if the user types q to quit
        # print the main menu
        print("1: View all tickets \n"
              "2: View an individual ticket \n"
              "3: Create ticket \n"
              "q: Quit")
        option = input("Select an option: ")

        if option == "1":  # option 1: view all tickets
            view_all_tickets()

        elif option == "2":  # option 2: view an individual ticket
            ticket_id = input("Enter ticket id: ")
            view_ticket(ticket_id)

        if option == "3":  # option 3: create a ticket
            create_ticket()


if __name__ == "__main__":
    main()
